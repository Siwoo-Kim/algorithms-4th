
기본 프로그램 모델
    자바 기본 구조.
        1. Primitive Data type
            :int, double, boolean, char
            자바에 사정 정의된 기본 데이터 타입. 특정 값의 집합과 그 값에 적용될 수 있는 연산들로 정의
            연산의 결과가 그 연산의 대상이 되는 데이터 타입과 동일한 타입을 가진다.
        2. Statement
        3. Array
            :동일한 타입의 값들의 나열 (Sequence)
            각 항목에 대해 인덱스로 접근. 인덱스는 N 개의 원소를 가진 배열에서 0..N-1 범위
        4. static method
            :인스턴스에 종속되지 않은 메서드 (함수).

            재귀 (Recursion)
                :자기 자신을 호출하는 메서드.
                재귀 호출은 종단 케이스(base case) 를 가진다.
                재귀 호출은 깊어 질수록 더 작은 문제 (sub-problem) 을 다루게 된다.
                재귀 호출간에 다루는 문제가 중첩되어선 안된다.

                모듈러 프로그래밍 (Modular Programming)
                    :함수를 논리적으로 묶어 하나의 라이브러리로 정의.

                    모듈러 프로그래밍 장점.
                        1. 전체 프로그램의 크기가 커지더라도 각각의 모듈은 적절한 크기로 만들 수 있다.
                        2. 코드를 재사용할 수 있다.
                        3. 특정 기능을 개선된 코드로 쉽게 교체할 수 있다.
                        4. 문제 해결을 위해 추상화 모델을 적용할 수 있다. (앱의 복잡도가 내려간다)

                    단위 테스트.
                        :모든 라이브러리마다 main 메서드를 포함해 제공하는 기능의 정상 동작 여부를 확인.

                API (Application Programming Interface)
                    :클라이언트에 제공되는 메서드의 묶음.
                    라이브러리 메서드들은 어떤 기능을 하는지 알려주는 클라이언트용 문서가 꼭 필요하다.
                    라이브러리를 사용하는 사용하는 프로그램을 Client, API 가 실제로 구현된 코드를 구현부라 한다.

        5. String
            :문자의 나열.
        6. IO
            :자바 프로그램이 외부 프로그램과 연동하는 기능.

            표준 출력: 운영체제의 터미널.
            표준 입력: 키보드에서 터미널에 입력되어 프로그램으로 들어오는 입력 스트림.

        7. Data abstraction.
            :여러 데이터 타입을 모아 하나의 독립된 데이터 타입으로 정의하여 재사용.

    자바 컴파일 & 런
        javac
            :java 파일 컴파일하는 명령어
        java
            :class 파일을 실행하는 명령어

    바이트 코드 (byte code)
        : 자바 소스 코드를 jvm 에서 구동할 수 있도록 저수준 명령어들로 변환한 것.

데이터 추상화.
    :사용자가 정의한 데이터 타입. 이때 데이터를 정의함을 데이터 추상화라 한다.

    데이터 타입
        :어떤 값들의 집합과 그 값들에 적용 가능한 연산/동작들으 ㅣ집합.

    객체지향 프로그래밍
        :어떤 객체에 대한 개념을 중심으로 그것이 가지는 데이터 값과 그것을 대상으로 수행 가능한 동작을 정의.

    Abstract Data Type (ADT) 추상 데이터 타입
        :데이터와 함수를 서로 연결 짓고 데이터의 표현 방식을 클라이언트로부터 숨기고 API 에 규정된 연산만 노출.
        프로그램을 디자인할 때 세부사항을 숨겨 놓으므로 프로그램의 복잡도를 낮춤.

        문제 자체를 바로 해당 문제에만 집중한 API 의 집합.

        ADT 의 API (API in Abstract Data Type)
            :추상 데이터 타입의 동작 방식을 API 로 정함.
            그 값이 무엇을 하는지만 (What) 문서화하고 어떻게 하는지 (How) 는 철저히 숨겨라
            API 은 사용자와의 약속이다.

    객체의 구성.
        :상태(State), 식별성(Identity), 동작 방식(Operation).

        객체의 상태.
            :데이터 타입이 가진 값.
        객체의 식별성.
            :객체가 다른 객체와 구분될 수 있는 정의.
        객체의 동작 방식.
            :데이터 타입 값에 따른 객체의 연산 혹은 동작.


