
ADT (Abstract Data Type)
    :데이터에 대한 연산만 공개하고 내부 구현은 캡슐화한 데이터 타입.
     추상화 작업을 통해 클라이언트에 노출 가능한 연산은 도출된다.

Bag, Queue, Stack
    :가장 기초적인 널리 사용되는 ADT (값들의 집합)

    컬렉션 반복자 (Iterator)
        :컬렉션의 순회 기능을 추상화한 인터페이스.

        구현한 컬렉션이 반복자를 지원하면 항목을 아래처럼 순회 가능.
            for (Transaction t: collection) {
                System.out.println(t);
            }

        컬렉션의 반복자 구현 (Iterator Implementation)
            : 컬렉션은 iterable 인터페이스를 확장하고 Iterator 객체를 리턴하는 iterator() 메서드를 구현해야 한다.
            : iterator() 에 생성되는 Iterator 은 hasNext(), next() 메서드를 구현해야 한다.

    백 (Bag)
        :항목을 삭제할 수 없는 컬렉션.
        항목 삽입과 순회 기능만을 제공.

        ex) 가방에 들어있는 구슬.

        백 API
            public interface Bag<E> extends Collection<E> {
                /**
                 * Add element in the bag
                 * @param el
                 */
                void add(E el);

            }

    큐 (Queue)
        :FIFO (First In First Out) 을 정책으로 하는 컬렉션.

        큐는 공정성에 기반 (가장 오래 기다린 사람이 먼저 서비스를 제공받음).

        ex) 입장소, 매표소

        큐 API
            public interface Queue<E> extends Collection<E> {

                /**
                 * Add element in the queue
                 * @param el
                 */
                void enqueue(E el);

                /**
                 * Remove the oldest element from the queue
                 * @return
                 * @throws java.util.NoSuchElementException
                 */
                E dequeue();
            }


    스택 Stack
        :LIFO (Last In First Out) 을 정책으로 하는 컬렉션.

        ex) 책상위의 편지, 이메일, 웹 서핑.

        스택의 응용.
            산술 표현식 계산.
                :2중 스택(연산자용 스택, 피연산자용 스택) 을 이용한 문자 산술식 계산.

                2중 스택-산술 표현식 알고리즘
                    피연산자용 스택을 ps, 연산자용 스택을 os 라 할때,
                    1. 피연산자를 만나면 ps에 넣는다.
                    2. 연산자를 만나면 os에 넣는다.
                    3. 닫힌 괄호를 만나면 os 에서 연산자 하나와 ps 에서
                    피연산자 두 개를 꺼낸 계산 후 ps에 넣는다.

        스택 API
            public interface Stack<E> extends Collection<E> {

                /**
                 * Add element in the stack
                 * @param el
                 */
                void push(E el);

                /**
                 * Remove the most recent added element from the stack
                 * @throws java.util.EmptyStackException
                 * @return
                 */
                E pop();

            }

    배열 기반의 스택 구현 ArrayStack Implementation.
        :인스턴스 변수 배열을 이용해 스택의 항목을 관리.
        이때 int N을 이용하여 스택에 담겨진 개수를 기록.

        ArrayStack 불변식. (ArrayStack In-variant)
            1. 항목이 배열에 저장된 순서는 삽입된 순서와 동일.
            2. 스택이 비어 있으면 N = 0;
            3. 스택의 top 항목은 스택이 비어 있지 않다면 a[N-1].

        ArrayStack 의 크기변경.
            :항목의 크기의 변경시 이에 맞추어 다른 크기의 배열로 복사.

            ArrayStack 내부 배열 크기에 대한 불변식
                항목 삽입시
                    스택 항목의 크기 N과 a.length 이
                    같다면 배열의 크기를 a.length * 2 만큼 확장.
                항목 제거시
                    스택 항목의 크기 N이 a.length / 4 보다 적다면
                    배열의 크기를 a.length / 2 만큼 감소. (감소 이후, 배열은 절반만 차 있는 상황이 된다)

            @ 로이터링 (Loitering)
                :객체의 사용을 마쳤더라도 참조가 남아 있어 GC 가 메모리를 회수하지 못하는 상황.

                자료의 집합을 관리하는 객체는 더 이상 사용되지 않은 객체에 대해서
                메모리 누수가 나지 않도록 직접 관리해야 한다.

    연결리스트 (LinkedList)
        :배열과 같이 컬렉션 ADT 구현에 적합한 기초적 자료구조.
        :연결 리스트는 재귀적인 자료 구조로 null 이거나 자료와 함께 다른 연결리스트의 참조를 가진 노드(Node) 로 이루어진 자료구조다.

         데이터 노드.
            :데이터와 다음 노드에 대한 참조 변수를 가지는 재귀적으로 정의된 데이터.

         노드 기본 조작 연산.
            1. Head에 노드 추가
                Node oldHead = head;
                head = new Node(el);
                head.next = oldHead
            2. Head 노드 제거.
                head = head.next;
            3. 노드의 순회
                for (Node c=head; c!=null; c=c.next)

    연결리스트 기반의 큐 구현 LinkedQueue Implementation
        :두 개의 참조, first, last 노드를 이용해 연결 리스트의 순서를 유지/관리.

        연결리스트 기반의 큐 불변식(LinkedQueue In-variant).
            1. 큐가 비어 있다면 first 와 last 은 모두 새노드를 가리킨다.
            2. first 은 가장 오랜된 항목을 가리킨다.
            3. last 은 가장 최근의 항목을 가리킨다.

    연결리스트 기반의 백 구현 LinkedBag Implementation
        :연결리스트 기반의 stack 에서 pop API 을 제거.

    백 (Bag), 큐 (Queue), 스택(Stack)의 요점 정리.
        : Bag, Queue, Stack 은 제네릭과 반복자를 이용해 추상화 되어 있어 클라이언트 코드를 간단하고 명확하게 해준다.
        또한 세가지의 ADT 는 고수준의 자료 구조의 빌딩 블록이 되며, 이들을 적절히 조합함으로 상충되는 성능 요건을 낼 수 있다.

    배열과 연결리스트 요점 정리.
        배열
            배열의 장점: 인덱스로 접근시 O(1)
            배열의 단점: 초기화 시점 미리 자료의 크기를 알아야 됨.
        연결리스트
            연결리스트의 장점: 저장할 자료 크기에 비례한 공간 소요.
            연결리스트의 단점: 다음 항목에 접근하기 위한 추가 참조를 저장.





