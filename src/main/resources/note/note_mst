Minimum spanning tree.
    :Edge Weighted Graph 의 Spanning Tree 중 가중치의 합이 최소인 Spanning Tree

    Spanning Tree
        :주어진 Edge Weighted Graph G의 순환 경로가 없으며 모든 정점을 포함하는 서브그래프.
        이때 Spanning Tree 는 Tree 이므로, Tree 의 속성을 가진다

        그래프 G가 Tree 임을 만족하는 조건.
            1. G 는 V-1 간선을 가지며 순환 경로가 없다. (G is a acyclic grpah.)
            2. G 는 V-1 간선을 가지며 연결되어 있다. (G is a connected graph.)
            3. G 은 연결되어 있지만, 어떤 간선이든 하나를 제거하면 연결이 끊어진다.
            4. G 은 비순환 그래프지만, 어떤 두 정점이든 간선 하나를 추가하면 순환 경로가 생긴다.
            5. G 의 임의의 두 정점을 연결하는 경로는 모든 경우에 있어 하나만 존재한다.

    MST 알고리즘
        :Prim, Kruskal 알고리즘.

        MST 알고리즘을 위한 속성.
            :cut property (자르기 속성)

        Cut property 자르기 속성
            :그래프의 자르기는, 정점들을 두 개의 서로소이면서 집합으로 분할한다.
            이때의 자르기에서 양쪽 집합 각각에 속한 정점을 잇는 간선을 crossing edge (횡단 간선) 이라 한다.
            => "주어진 Edge Weighted Graph 에서, 어떤 임의의 자르기에서 최소 가중치를 가지는 crossing edge 은 그 그래프의 MST 에 해당한다."

        탐욕 알고리즘.
            : MST 문제를 해결하기 위한 알고리즘 패러다임.

            V개의 정점을 가진 Edge Weighted Graph 에서 MST 에 해당하는 모든 간선을 검은색으로 칠한다.
                1. 모든 간선을 회색으로 칠한다.
                2. 검은 간선을 포함하지 않은 CUT 을 찾아 가중치가 가장 낮은 간선을 검은색으로 칠한다.
                    => 자르기 속성을 찾을때 반드시 그래프를 두 집합으로 나누어야 하며, 서로소여야 한다.
                3. 위를 V-1 개의 간선이 검은색으로 칠해질 때까지 반복한다.

        MST 의 구현.
            : 응용 상황에 최대한 자유롭게 선택할 수 있도록 간선의 리스트에 대한 API 로 정의.

        Prim 알고리즘.
            : 프림 알고리즘은 하나의 임의 정점을 포함한 T에서 새로운 간선을 단계적으로 MST 로 키우는 방법.

            1. 임의의 정점을 선택하여 정점 하나짜리 트리에서 시작한다.
            2. 다음에 붙일 간선은 새로운 정점을 트리에 추가할 수 있는 간선 중 (트리의 정점들에 의해 정의되는 cut 에서의 crossing edge)
            최소 가중치 간선을 선택해 붙인다.
            3. 2 를 반복하여 V-1 개의 간선을 붙여 나간다.

            Prim's algorithm works by attaching a new edge to a single growing tree at each step.
                 1.Start with any vertex as a single-vertex tree;
                 2.Add V-1 edges to it, always taking next (coloring black) the minimum-weight edge that connects a
                 vertex on the tree to a vertex not yet on the tree (a crossing edge for the cut defined by tree vertices).

            Prim 알고리즘은 어떠한 Edge Weighted Graph 에서도 MST 을 구해낸다.
                : 자라나는 트리 T 는 검은 간선이 없는 자르기를 정의하게 된다.
                프림 알고리즘은 탐욕 알고리즘으로서 최소 가중치 횡단 간선을 계속해서 선택하여 V-1 의 검은색 간선을 만든다.

            프림 알고리즘의 자료구조.
                트리의 정점에 대한 자료구조, 트리의 간선을 위한 자료구조, 횡단 간선과 최소 가중치을 위한 PriorityQueue.

            프림 알고리즘의 Crossing Edge 집합의 유지 관리.
                :MST 트리에 속하는 정점을 추가할 때마다, 새로 추가된 정점에서 트리에 속하지 않은 정점들에 이르는 모든 간선을 우선 순위 큐에 넣어야 한다.
                (새로운 정점에 대한 간선을 우선 순위 큐에 업데이트 한다. - 부적합하지 않다면)
                다음 횡단 간선을 선택할때, 우선 순위 큐에 있던 기존의 간선들의 적합 검사를 한 뒤, 적합하다면 해당 정점을 트리에 추가한다.
                (이미 두 개의 정점이 트리에 속한다면 해당 간선은 더이상 crossing edge 가 아니다.)

            느긋한 버전의 프림 알고리즘.
                :E개의 간선과 V개의 간선을 가지는 Edge Weighted Graph 의 MST 을 계산하는데, E 에 비례하는 공간과 E log E 에 비례하는 시간을 소요한다.

            성급한 버전의 Prim 알고리즘.
                :우선 순위 큐에서 부적합 간선을 삭제. (트리의 정점과 트리가 아닌 연결 횡단 간선과, 그중 최소 가중치 간서만을 유지)

                T의 밖의 정점 w 각각에 대해 그 정점을 트리로 연결하는 간선 중 가장 가벼운 간선 단 하나만을 우선순위 큐에서 관리.

                성급한 버전의 Prim 알고리즘의 자료구조.
                    : T 에 대한 지금까지 알려진 최소 횡단 간선을 유지하는 배열 edge 와, 그 간선의 가중치를 유지하는 배열 dist.
                    : edge 배열의 가중치를 기준으로 관리하는 우선순위 큐.

                1. 정점 v 를 꺼내어, 그 인접 리스트에 있는 각각의 v-w 간선을 검사. (w 가 표시되어 있으면 부적합 간선).
                2. 만약 그 간선이 우선순위 큐에 없거나, 그 가중치가 현재까지 확인된 최소 간전 dist[w] 보다 작다면, v-w 을 최소 간선으로 업데이트하고 w 를 트리에 추가.

        Kruskal 알고리즘.
            : Edge Weighted Graph 에서 MST 을 구하는 알고리즘으로,
            가중치 순으로 간선들을 순회하며 T 와 순환하지 않는다는 것이 확인되면 해당 간선을 MST 에 추가.
            => 이때 Connected Components 의 개념을 이용하면 쉽게 순환하는지를 알 수 있다. (무방향 그래프)

            Kruskal 알고리즘의 도구와 자료구조.
                : 간선 가중치 순서를 다르기 위한 우선순위 큐, 순환 경로의 생성 여부를 검사하기 위한 Union-Find, MST 의 간선을 모으기 위한 큐.

    Edge Weighted Graph 구현.
        : 간선의 가중치를 표현하기 위해 Edge 객체에 대한 클래스와 인접리스트를 이용해 그래프를 표현.












