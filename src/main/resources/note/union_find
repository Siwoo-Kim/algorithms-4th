유니온-파인드 (UNION-FIND)
    :여러 서로소 집합(Disjoint Set)의 정보를 저장하는 자료구조.

    동적 연결성
        :입력이 정수 쌍 의 나열이며 각 정수에 어떤 타입을 가지고 있을 때,
        정수 p, q 에 대해서 "p 와 q 과 연결되었다" 는 둘의 동치 관계(equivalence relation)로 가정.
        이때 동치 관계는 여러 객체를 그 관계를 만족하는 집합으로 규정한다.
        여러 객체의 연결 여부를 판단하는 문제를 "동적 연결 문제" 라 한다.

        동적 연결 문제
            :여러 정점간의 연결 여부를 판단하는 문제.

        동치 관계 (Equivalence relation)
            반사성 reflexive
                :p 는 자기 자신과 연결되었다.
            대칭성 symmetric
                :p 와 q 가 연결되었다면, q 와 p 도 연결되었다.
            전이성 transitive
                :p 와 q 가 연결되었고, q 와 z 가 연결되었다면 p 와 z 도 연결되었다.

        동적 연결 문제 ex)
            네트워크
                :p 와 q 가 컴퓨터일때, 서로 통신할 수 있게 p, q 가 연결되었는지 파악.
            프로그래밍
                :복수의 변수 p 와 q 가 같은 객체를 가리키는 지 파악.
            수학 집합
                :집합의 원소 p, q 가 같은 집합에 속하는지 파악.

        예제를 통한 용어 정리
            사이트: 정점 (Node, Vertex)
            사이트의 연결: 간선 (Edge, Link)
            간선으로 연결된 집합: 연결된 컴포넌트 (Connected Component or Component)

    유니온 파인드 API (UNION-FIND API)

        public interface UnionFind {

            /**
             * add connection between p and q
             * @param p
             * @param q
             */
            void union(int p, int q);

            /**
             * get component identifier for p (0 to N-1)
             * @param p
             * @return
             */
            int find(int p);

            /**
             * are p and q are in the same component?
             * @param p
             * @param q
             * @return
             */
            boolean connected(int p, int q);

            /**
             * number of components
             * @return
             */
            int count();
        }

    유니온 파인드 설계
        1. 하나도 연결되지도 않은 UF 에서 정점들은 N개의 다른 컴포넌트.
            :각 정점은 하나 하나가 스스로의 컴포넌트가 된다.
        2. 각 정점마다 그 정점이 속한 컴포넌트를 find() 에서 찾을 수 있도록 구현한다.
            :find 을 구현하면 find(p) == find(q) 을 이용해 connected 을 구현할 수 있다.
        3. 알고리즘을 분석하기 위해, 배열 항목에 접근하는 횟수에 집중한다.

    퀵-파인드 UF 구현 (Quick-Find UF Implementation)
        퀵-파인드 UF의 불변식 (Quick Find UNION-FIND in-variant)
            * p 와 q 가 연결되었다면 id[p] 와 id[q] 도 동일하다.
                :같은 컴포넌트에 속한 노드의 식별자는 모두 같은 값.
                :불변식을 만족하기 위해 union(p, q) 호출에 관하여
                p, q 에 속한 모든 노드는 같은 컴포넌트로 합쳐야 한다.

        퀵-파인드 성능 분석.
            find, connected 은 O(1).
            두 컴포넌트를 병합하기 위한 union 호출시 O(N). 배열 접근 횟수는 (N+3 ~ 2N+1) 회.

    퀵-유니온 UF 구현 (Quick-Union UF Implementation)
        : 퀵-파인드 UF 의 union 연산의 속도를 보완.
        퀵-파인드의 불변식과는 다른 속성을 정의.

        퀵-유니온 유니온 파인드의 불변식(Quick Union UNION-FIND in-variant)
            각 정점은 다른 정점의 컴포넌트를 가리킨다.
                :이를 링크 혹은 간선 (Link, Edge) 이라 한다.
            뿌리는 자기 스스로와 스스로에 연결된 정점를 의미.
                :find(p) == p
            뿌리가 아니라면, 간선을 연속해서 따라가면 결국 뿌리와 만난다.
                while(find(p) != p)  {
                    p = find(p); //루트를 찾아간다.
                }
            두 노드가 연결된 컴포넌트라면 같은 뿌리를 가진다..
                find(p) == find(q)
         퀵-유니온의 union 구현.
            정점 p 와 q의 뿌리를 찾아, 두 뿌리 중 하나를 다른 뿌리에 연결.

        트리-숲 표현 방식 (tree & forest)
            :임의의 노드에서 시작하여 링크를 따라가면 뿌리 노드에 도달.
            이때 유니온은 두 뿌리 노드 중 하나의 부모로써 다른 쪽 뿌리 노드를 삽입. (두 개의 트리를 병합.)

        퀵-유니온 유니온 파인드의 정의.
            :트리의 크기는 노드의 개수이다.
            트리에서 어떤 노드의 깊이(depth)는 뿌리에서 그 노드까지 이르기 위해 거쳐야 하는 링크의 갯수.
            트리의 높이(height) 은 노드의 깊이 중 가장 큰 값이다.

        가중 퀵-유니온 Weighted Quick Union 구현 (Weighted Quick-Union UNION-FIND Implementation)
            :이전의 퀵-유니온은 최악의 경우 높이 N-1 의 트리가 생성된다. (0-1, 1-2, 2-3)
            이때 최악 상황이 발생되지 않도록 각 트리의 크기를 기록해 두며 항상 작은 트리를 큰 트리에 연결.

            가중 퀵-유니온 구현
                1.각 트리의 크기를 기록한다.
                2.병합시 작은 트리를 큰 트리에 연결한다.

            가중 퀵-유니온 성능
                :가장 큰-유니온으로 만들어진 트리-숲은 전체 노드 개수가 N이라 할 때,
                노드의 깊이는 최대 logN 을 넘지 않느다.

        3가지의 Union Find 구현 정리
            가중 퀵-유니온은 find, connected, union 최악 조건 실행 시간은 N개의 노드에 대해 logN 이다.
            즉, 가중 퀵-유니온 UF 은 세 알고리즘 중 가장 현실적으로 사용 가능하다.