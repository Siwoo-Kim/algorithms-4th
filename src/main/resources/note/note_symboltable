심볼테이블 (Symbol Table)
    :심볼 테이블은 키/값 쌍의 자료 구조로, 삽입과 탐색 (put and get)을 지원.
    put 은 새로운 키/값 쌍을 저장, 탐색(get) 은 주어진 키에 연관된 값을 탐색.

    심볼테이블 ex)
        사전 (단어-설명)
        책의 색인(색인어-페이지 번호)
        계좌 관리(계좌 번호-트랜잭션)

    SymbolTable API
        /**
         * put key-value pair into the table
         * @param key
         * @param value
         */
        void put(K key, V value);

        /**
         * value paired with key
         * @param key
         * @return
         */
        V get(K key);

        /**
         * remove key (and its value) from table
         * @param key
         */
        void remove(K key);

        /**
         * is there a value paired with key?
         * @param key
         * @return
         */
        boolean contains(K key);

    SymbolTable 의 관례
        * 중복 키를 허용하지 않는다.
            :키 하나에 하나의 값만 연관.
            :이미 존재하는 키에 대한 삽입 작업은 기존 값을 대체.
        * Null 키를 허용하지 않는다.
        * Null 값을 허용하지 않는다.
        * 삭제는 느긋한 (lazy) 혹은 성급한 (eager)이 될 수 있다.
        * Key 에 대한 반복자(Iterator<Key>) 구현으로 키/값 쌍을 순회할 수 있도록 한다.
        * 키는 객체의 동일성 개념을 구현 (equals) 해야하며 불변 타입으로 정의하는 것이 바람직하다.
            키의 동일성.
                반사성, 대칭성, 추이성.


    순차 심볼 테이블.
        :순차적으로 Key 에의해 정렬된 Key-Value 쌍을 저장하는 심볼테이블.

        최대, 최소.
            :정렬된 키 집합에서 최대, 최소 탐색
            * 정렬된 키 집합에서 가장 작은 키 혹은 가장 큰 키 탐색.

        floor, ceiling
            :주어진 키의 상대적 위치에 대한 검색
            * 어떤 주어진 키에 대해서 그 키보다 적거나 같은 키 중 가장 큰 키 (floor)
            혹은 그 키보다 크거나 같은키 중 가장 작은키 (ceiling).

        rank, rankOf
            :키의 순위에 대한 검색 지원
            * 주어진 키보다 작은 키의 갯수와 주어진 순위의 키에 대한 탐색.

            위를 위해서 0..N-1 인 i 에 대해 아래가 성립해야 한다.
                i == rankOf(rank(i))
                key = rank(rankOf(i))


        범위 조회.
            :범위에 대한 조회 기능을 지원
            * 어떤 범위 안에 키가 몇개나 존재하는가?
            * 어떤 키가 주어진 범위에 존재하는가?

    심볼 테이블 비용 모델
        :심볼 테이블 구현의 성능 확인시 비교 연산(equals 와 compareTo) 연산의 횟수를 헤아린다.
        비교 연산이 없을 땐 배열 접근 횟수를 헤아린다.

    비순차 연결 리스트에서의 순차 탐색 구현. (Sequential search in an unordered linked list)
        :키/쌍을 가진 연결리스트르 심볼 테이블을 구현.

        비순차 연결리스트 구현 성능
            :N개의 키/값 쌍이 저장된 비순차 연결 리스트 기반 심볼 테이블에서, 새로운 키/값 쌍이 삽입되거나
            탐색이 실패하는 경우 n번의 비교 연산이 소요.
            :비어 있는 연결리스트 심볼 테이블에서 n개의 서로 다른 키를 삽입할 때는 ~N^2/2 비교 연산이 소요.

    정렬된 배열에서의 이진 탐색 (Binary search in an ordered array.)
        :키에 대한 배열, 값에 대한 배열과 이진 탐색을 이용한 SymbolTable 구현.

        이진 탐색.
            :부분 배열 가운데 요소와 키를 비교하고 아래를 진행.
                1. 주어진 키가 더 작으면 부분 배열의 왼쪽 편 탐색.
                2. 주어진 키가 더 크면 부분 배열의 오른쪽 탐색.
                3. 주어진 키와 가운데 요소가 같다면 키를 리턴.
                4. 두 경우가 모두 아니거나, 부분 배열을 모두 소모했다면
                마지막 요소를 리턴.

            이진 탐색시 모든 부분 배열을 소모했을때 low 을 리턴하면, 주어진 key 보다 작은 테이블의 키 갯수이다.
                :low 은 0부터 시작하고 절대 줄어들지 않으며 모든 키와 비교하므로 증명된다.


