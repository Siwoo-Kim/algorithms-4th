균형 탐색 트리 (Balanced Search Tree)
    :이진 탐색 트리의 최악 조건을 보완하기 위한 삽입과 탐색 모두 로그 시간을 보증하는
    perfect binary tree (포화 이진 트리). complete binary tree > perfect binary tree
    N개의 노드가 있는 트리라면 높이가 ~logN 을 보증한다.

    포화 이진 트리 perfect binary tree = PBT
        :모든 노드가 0개 혹은 2개의 자식 노드를 가지며 마지막 leaf 가 똑같은 레벨에 있는 트리.
        완전 균형 트리에선 root 로부터 leaf 링크까지의 거리가 동일.

    2-3 탐색 트리
        2-노드 (키 하나에 두 개의 링크) 와 3-노드를 가지는 BST

        2-3 탐색 트리의 특징.
            2-노드
                :하나의 키와 두 개의 링크를 가지는 노드.
                왼쪽 링크는 더 작은 키를 담는 2-3 탐색 트리
                오른쪽 링크는 더 큰 키를 담는 2-3 탐색 트리.
            3-노드
                :두 개의 키와 세 개의 링크를 가지는 노드.
                왼쪽 링크는 더 작은 키를 담고 있는 2-3 탐색 트리.
                가운데 링크는 두 개의 키 사이에 있는 키들을 담고 있는 2-3 탐색 트리.
                오른쪽 링크는 더 큰 키를 담고 있느 2-3 탐색 트리.

        탐색
            :BST 탐색 알고리즘과 동일.

        삽입.
            2-노드로의 삽입.
                2-노드를 3-노드로 바꾸어 새로운 키를 추가. (포화 이진 트리의 불변식을 유지)
            3-노드로의 삽입
                1. 3-노드를 임시 4-노드 (키가 세개, 자식 링크가 네개)로 변경.
                2. 4-노드의 중간 키를 부모 노도르 옮긴다.
                    :이때 중간 키(루트), 다른 하나는 가장 작은 키(왼쪽 링크),
                    나머지 하나는 가장 큰 키(오른쪽 링크) 로 불변식을 만족.
                3. 만약 부모가 4-노드가 되었다면 동일한 작업을 반복.

                % 3-노드로의 삽입로 인한 뿌리 노드의 분할.
                    :뿌리 노드에 "3-노드로의 삽입" 적용
                    이때 트리의 높이가 1 증가한다.

            임시 4-노드의 지역 변환
                :임시적으로 생성된 4-노드의 분할 작업.
                각각의 변환은 임시-노드의 키 하나를 위쪽으로 전달하여
                트리의 다른 부분을 건드리지 않고 관련 링크만 적절하게 조정.
                모든 지역 변환들은 전체 트리의 "정렬 속성"과 "perfect binary tree" 속성을 유지.

    레드-블랙 BST
        :2-3 탐색 트리을 알고리즘을 간편하고 오버헤드를 줄이기 위한 다른 표현 방식의 알고리즘.
        표준 BST(2-노드기반의 트리) 에 3-노드를 표현할 수 있도록 추가 정보를 첨가.

        링크의 종류 혹은 3-노드의 표현.
            레드 링크 Red Link
                :두 개의 2-노드를 묶어 3-노드로 표현.
                이때 레드 링크는 반드시 큰 키에서 작은 키로 연결되어야 한다.
                레드 링크의 왼쪽 노드의 오른쪽에 가운데 2-3 트리가 연결.

            블랙 링크 Black Link
                :2-3 노드에 대한 링크.

        레드-블랙의 불변식.
            : 레드 링크는 왼쪽으로 기운다. (큰키->작은키)
            : 어떤 노드도 두 개의 레드 링크에 연결되지 않는다.
                즉, 3-노드 이상으론 허용치 않는다.
            : 트리는 perfect binary tree 상태이다.
                즉, 뿌리에서 null 링크로의 모든 경로들이 동일한 갯수의 블랙 링크를 거쳐간다.
                (레드 링크는 두 노드를 합친 링크이므로 배제)

        로테이션
            :2-3 트리의 지역변환, 완전 균형 트리의 불변식을 위한 교정 작업.

            왼쪽 로테이션 (Left Rotation).
                :오른쪽으로 기울어진 레드 링크을 왼쪽으로 옮기는 작업.
                %오른쪽으로 기울어진 레드 링크는 작은 키가 부모에 있고 큰 키가 자식에 있는 형태.

            오른쪽 로테이션
                :왼쪽으로 기울어진 레드 링크를 오른쪽으로 옮기는 작업. (색 반전 교정 중 사용)

        로테이션을 이용한 트리 속성 만족.
            새로운 노드 삽입시 항상 레드 링크로 연결.

            2-노드로의 삽입.
                새로운 키가 기존 키보다 작다면.
                    :레드 노드 링크로 연결하고 삽입. (3-노드 생성)
                새로운 키가 기본 키보다 크다면.
                    :레드 노드 링크로 연결하고 삽입. (3-노드 생성)
                    이때 "레드 링크는 왼쪽으로 기운다" 는 불변식을 헤치므로 leftRotation 으로 교정 작업.

            3-노드로의 삽입.
                :루트의 두 자식 링크의 색 반전하고 적절한 로테이션을 통해 트리의 특성을 유지할 수 있다.

                :세 가자의 경우가 존재.
                1. 새로운 키가 기존 두 키보다 작은 경우.
                    새로운 키는 가장 왼쪽에 레드 링크로 연결. (레드 링크가 두 개이므로 4노드 생성)
                    이때 가장 위쪽 링크에서 오른쪽 로테이션. (중간 키가 뿌리가 되고 나머지 두 캐의 레드 링크 형태가 된다.)
                    이후 색반전하여 트리의 높이를 1 증가.

                2. 새로운 키가 기존 두 키 사이에 있는 경우.
                    새로운 키는 기존 같은 행에 두 개의 레드 링크가 된다. (레드 링크가 두 개이므로 4노드 생성)
                        왼쪽으로 기울어진 레드 링크와 그 아래에 오른쪽으로 기울어진 레드 링크. (중간 값이니까)
                    이때 오른쪽으로 기울어진 레드 링크가 생겼으므로 left Rotation 을 하면
                    1번 케이스와 같은 상태가 된다.
                    1번 케이스의 알고리즘을 이용해 트리 교정 작업을 실행.

                3. 새로운 키가 기존 두 키보다 큰 경우.
                    새로운 키는 가장 오른쪽에 레드 링크로 연결.
                    이때 중간 키가 뿌리가 되고 크보다 작은 키와 큰 키가  각각 레드 링크와 연결되어 트리 균형이 이루어진다.
                    간단히 색반전을 통해 트리의 높이를 1 증가.

            색 반전 flipping color
                :두 자식의 색을 레드에서 블랙으로 반전할때 부모 노드의 색을 블랙에서 레드로 반전.
                증명: 4-노드의 자식에서 색 반전을 통해 가운데 요소를 부모로 변경하였으므로,
                가운데 노드는 이전 부모 노드와 레드 링크로 연결하여 "3-노드"로 변경.

            Root 를 블랙으로 유지하기.
                : 어떤 노드가 레드라는 것은 그 노드가 부모와 함께 3-노드라는 것을 의미.
                하지만 루트는 부모를 가지지 않으므로 삽입 작업 후에 색 반전으로 인해 변경된 뿌리 노드의 색을 블랙으로 돌려놓는다.

                % 뿌리 노드의 색이 반전될 때마다 트리의 블랙 높이가 1씩 증가.

            로테이션 작업 요약.
                1. 만약 오른쪽 자식 노드가 Red 이고, 왼쪽 자식 노드가 Black 이면 left rotation.
                2. 만약 왼쪽 자식 노드와 그 노드의 왼쪽 자식 노드가 모두 레드(4노드) 라면 오른쪽 로테이션 (3을 통한 자동 색반전).
                3. 만약 양쪽 자식 노드 모두 레드이면 색 반전.

        레드-블랙 트리의 삭제
            :2-노드의 삭제가 트리의 불변 조건(black perfect balance) 을 헤치지 않는 다는 것이 관건.

            최소 항목 삭제.
                :마지막에 2-노드를 만나지 않는 다는 것을 불변 조건으로 유지.
                    => 즉, 현재 노드는 3-노드 또는 임시 4-노드가 되게 한다.

                뿌리에서의 상황.
                    1. 뿌리가 2-노드가 아니라면 필요 작업 없음.
                    2. 뿌리가 2-노드이고 두 자식들도 2-노드라면, 세 개(루트, 왼쪽, 오른쪽 자식) 을 4-노드 변환.
                    3. 그 외의 경우엔 오른쪽의 형제 노드에서 키를 빌려와 뿌리의 왼쪽 자식 노드가 2-노드가 아니게 변환.

                내려가면서.
                    1. 현재 노드의 왼쪽 자식 노드가 2-노드가 아니라면 필요 작업 없음.
                    2. 왼쪽 자식 노드가 2-노드이고, 옆의 형제 노드가 2-노드가 아니라면 형제 노드의 가장 작은 키를 부모로,
                    부모의 가장 작은 키를 왼쪽 자식 노드로.
                    3. 만약 왼쪽 자식, 옆의 형제 노드 둘다 2-노드라면 부모의 가장 작은 키와 함께 모두 합쳐서 4-노드로 만들고
                    부모 노드를 한 단계 작은 노드로 만든다.

                작업 마지막.
                    가장 작은 키를 흡수하여 3-노드 혹은 4-노드가 되므로 쉽게 삭제.
                    트리를 올라가면서 사용되지 않은 임시 4-노드를 다시 분할.

            삭제
                :최소 항목 삭제 과정에 사용된 방법을 사용. (임의의 탐색 과정에서 현재 노드가 2-노드가 되지 않도록 작업)

                1. 탐색 키가 바닥에 있다면 그냥 삭제.
                2. 키가 바닥에 없다면 근후행 노드와 교환.

                트리 교정.
                    1. 현재 노드가 2-노드가 아니게 되었으므로 "뿌리 노드가 2-노드가 아닌 부분 트리에서 최소 항목을 삭제하는 문제" 로 해결. (최소 항목 삭제)


        레드-블랙 BST의 속성.
            :N개의 노드를 가진 레드-블랙 BST의 높이는 2 lg N보다 크지 않다.


























